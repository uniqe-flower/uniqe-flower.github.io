<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于bilibili-api搭建的获取特定UP视频更新的爬虫</title>
      <link href="/2024/10/21/ji-yu-bilibili-api-de-pa-chong/"/>
      <url>/2024/10/21/ji-yu-bilibili-api-de-pa-chong/</url>
      
        <content type="html"><![CDATA[<p><strong>bilibili-api</strong> 是一个用 <em>Python</em> 写的调用 <em>Bilibili</em> 各种 API 的库， 范围涵盖视频、音频、直播、动态、专栏、用户、番剧等。常规的关注功能并不简洁且直观，会<strong>附着一些无用的信息</strong>，这里将搭建一个获取特定UP更新视频并<strong>简洁地显示相关标题及URL</strong>的爬虫，来实现未登陆状态下或无账号状态下的另类关注功能。</p><p>##1 相关工具</p><h3 id="1-bilibili-api下载"><a href="#1-bilibili-api下载" class="headerlink" title="1.bilibili-api下载"></a>1.bilibili-api下载</h3><p>首先使用以下指令安装此模块：</p><pre><code>$ pip3 install bilibili-api-python</code></pre><p>然后引用模块的user功能:</p><pre><code>from bilibili_api import user</code></pre><p>##2 相关函数</p><p>###1.asyncio</p><p><strong>asyncio</strong> 是 <em>Python</em> 中用于实现异步编程的标准库，这里主要用到以下功能</p><ol><li><strong>事件循环（Event Loop）</strong>：<em>asyncio</em> 通过事件循环来调度和执行异步任务</li><li><strong>协程（Coroutine）</strong>：<em>asyncio</em> 使用协程作为异步编程的基础。协程是一种特殊的函数，可以在执行过程中暂停并在稍后恢复。使用  <strong>async def</strong> 定义协程函数，并在函数内部使用 <strong>await</strong> 关键字来挂起执行</li></ol><p>示例:</p><pre><code>#定义协程函数async def main() -&gt; None:    ....#....内容后面有提if __name__ == &quot;__main__&quot;:    asyncio.get_event_loop().run_until_complete(main())#调度和执行异步任务</code></pre><p>###2.time()<br><strong>time</strong> 是 <em>python</em> 的内置库，其中的 <strong>time()函数</strong> 用于返回当前时间戳（时间戳，是从1970年1月1日（UTC&#x2F;GMT的午夜）开始所经过的秒数（不考虑闰秒），用于表示一个时间点），通过新建目录下的文档读取上次使用时的时间戳并复写当前时间戳来记录（初次使用时需先填入任选的默认值），来比较视频上传时的时间戳以此返回新上传的视频信息</p><p>相关代码如下:</p><pre><code>import timecurrent_timestamp = str(int(time.time()))file_path = &quot;ts.txt&quot;#读取上次使用时时间戳with open(file_path, &quot;r&quot;, encoding=&quot;utf-8&quot;) as file:    content = int(file.read())#写入当前时间戳with open(file_path, &quot;w&quot;, encoding=&quot;utf-8&quot;) as file:    file.write(current_timestamp)</code></pre><p>###3.get_media_list()</p><p><em>bilibili-api</em> 的 <strong>get_media_list()函数</strong> 以 <em>medialist</em> 形式获取用户投稿信息。本文用到的该函数的形参是 <strong>ps&#x3D;</strong> ,该形参是每页返回的视频数，默认是 <em>20</em>，最大值是 <em>100</em> ，因为不想分好几页来获取信息，所以将该值改为较大值（这里该为 <em>40</em> ，根据需要也可以任意更改）</p><p>该函数返回一个字典，这里主要用到是以下键:</p><ol><li>标题：  <strong>[‘media_list’][i][‘title’]</strong></li><li>发布时间: <strong>[‘media_list’][i][‘pubtime’]</strong></li><li>bv号:    <strong>[‘media_list’][i][‘bv_id’]</strong></li><li>up名     <strong>[‘media_list’][i][‘upper’][‘name’]</strong></li></ol><p>其中 <strong>i</strong> 为从0开始的整数，将要获取的 <em>up</em> 的 <em>uid</em> 填入 <strong>list_up</strong> 列表中来遍历获取信息，….内容的代码如下:</p><pre><code>list_up = []#将uid填入该列表中for uid in list_up:    kolm = 0    v = user.User(uid=uid)    while kolm == 0:        info = await v.get_media_list(ps=40)        for i in range(40):            title = info[&#39;media_list&#39;][i][&#39;title&#39;]            ts = info[&#39;media_list&#39;][i][&#39;pubtime&#39;]            bvid = info[&#39;media_list&#39;][i][&#39;bv_id&#39;]            name = info[&#39;media_list&#39;][i][&#39;upper&#39;][&#39;name&#39;]            if ts &lt; content:                kolm = 1                break            else:                print(name+&#39;--&#39;+                        title+&#39; -- https://www.bilibili.com/video/&#39;+bvid)</code></pre><p>##3 完整代码 </p><pre><code>import asynciofrom bilibili_api import userimport timecurrent_timestamp = str(int(time.time()))file_path = &quot;ts.txt&quot;with open(file_path, &quot;r&quot;, encoding=&quot;utf-8&quot;) as file:    content = int(file.read())async def main() -&gt; None:    for uid in list_up:        kolm = 0        v = user.User(uid=uid)        while kolm == 0:            info = await v.get_media_list(ps=40)            for i in range(40):                title = info[&#39;media_list&#39;][i][&#39;title&#39;]                ts = info[&#39;media_list&#39;][i][&#39;pubtime&#39;]                bvid = info[&#39;media_list&#39;][i][&#39;bv_id&#39;]                name = info[&#39;media_list&#39;][i][&#39;upper&#39;][&#39;name&#39;]                if ts &lt; content:                    kolm = 1                    break                else:                    print(name+&#39;--&#39;+                        title+&#39; -- https://www.bilibili.com/video/&#39;+bvid)        with open(file_path, &quot;w&quot;, encoding=&quot;utf-8&quot;) as file:            file.write(current_timestamp)if __name__ == &quot;__main__&quot;:    asyncio.get_event_loop().run_until_complete(main())------------------------------------------------------# print out:# name_1 -- title_1 --https:.....# name_2 -- title_2 --https:.....# ......</code></pre><p>##4 其他</p><p>例外，<strong>bilibili-api</strong> 还有可以实现很多功能，范围涵盖视频、音频、直播、动态、专栏、用户、番剧等。除了 <strong>get_media_list</strong> 函数外，<strong>get_videos</strong> 和 <strong>get_dynamics_new</strong> 也可以实现上述类似功能，详细请访问源文档或访问<a href="https://pypi.org/project/bilibili-api-python/" title="bilibili-api官网">https://pypi.org/project/bilibili-api-python/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建立自己的Github博客网站</title>
      <link href="/2024/06/29/jian-li-blog/"/>
      <url>/2024/06/29/jian-li-blog/</url>
      
        <content type="html"><![CDATA[<p>建立自己的博客网站来装逼是不错的方式，在没有代码基础的情况下，Github可以提供<strong>免费</strong>的网站服务，你只需要有一个GitHub账号就可以了(注意GitHub需要用邮箱注册)，在注册完成剩下的就按接下的步骤就行了</p><h2 id="1-相关工具安装"><a href="#1-相关工具安装" class="headerlink" title="1 相关工具安装"></a>1 相关工具安装</h2><h3 id="1-Node环境"><a href="#1-Node环境" class="headerlink" title="1.Node环境"></a>1.Node环境</h3><p>Hexo是基于 Node.js 驱动的一款博客框架,所以要先安装Node<br>可以参考<a href="https://blog.csdn.net/yaorongke/article/details/119084295" title="NodeJS安装及配置">https://blog.csdn.net/yaorongke/article/details/119084295</a>，值得注意的是，看清Node支持操作系统的哪个版本（例如Win7最高支持V12.22.12）</p><h3 id="2-Git环境"><a href="#2-Git环境" class="headerlink" title="2.Git环境"></a>2.Git环境</h3><p><a href="https://git-scm.com/downloads" title="Git安装官网">https://git-scm.com/downloads</a>，安装的话除了安装路径之外一直”Next”就行，也可以自己根据需求自己更改选项,之后在cmd里分别输入nide&#x2F;git,检查是否成功安装<br><img src="https://pic.imgdb.cn/item/66841426d9c307b7e9729409.png"><br>以上情况即安装成功</p><h2 id="2-Github准备工作"><a href="#2-Github准备工作" class="headerlink" title="2 Github准备工作"></a>2 Github准备工作</h2><h3 id="1-建立仓库"><a href="#1-建立仓库" class="headerlink" title="1.建立仓库"></a>1.建立仓库</h3><p><a href="https://github.com/" title="Github官网 ">https://github.com/</a><br>首先在Github页面的右上方找到<strong>新建仓库</strong>，然后点击，选择<strong>public</strong>，<br><img src="https://pic.imgdb.cn/item/6682d1bad9c307b7e95333bd.png"></p><p>注意仓库的取名格式：<strong>用户名.github.io</strong>(这将是以后的访问域名)<br><img src="https://pic.imgdb.cn/item/66841048d9c307b7e96a9d03.png"></p><p>然后把下面这段仓库的<strong>SSH地址</strong>复制下来留着后面配置时会用到<br><img src="https://pic.imgdb.cn/item/668410e0d9c307b7e96be52a.png"></p><p>之后等待即可，要访问https:&#x2F;&#x2F;用户名.github.io需十几分钟时间，你可以先从事与下一步</p><h2 id="3-Hexo安装"><a href="#3-Hexo安装" class="headerlink" title="3 Hexo安装&#96;"></a>3 Hexo安装&#96;</h2><p>先在自己喜欢的磁盘空间里创建一个本地文件夹，选中创建的目录(文件夹)右键选择使用Gti Bash Here打开Git命令窗口，之后输入</p><pre><code>$ npm install -g cnpm --registry=https://registry.npmmirror.com</code></pre><p>之后依次再输入</p><pre><code>$ cnpm install -g hexo-cli$ hexo init</code></pre><p>第一行命运为安装hexo，第二行命令为初始化Hexo，运行成功后会出现如下文件<br><img src="https://pic.imgdb.cn/item/6684171bd9c307b7e979ae86.png"></p><p>此时输入</p><pre><code>hexo s</code></pre><p>hexo sever的缩写，作用是启动本地服务器，用于预览主题,浏览器输入localhost:4000即可以在本地浏览博客(自带一篇Hello World博客),如何按Ctrl+c退出<br><img src="https://pic.imgdb.cn/item/668417e1d9c307b7e97b51a3.png"></p><h2 id="4-设置ssh"><a href="#4-设置ssh" class="headerlink" title="4 设置ssh"></a>4 设置ssh</h2><h3 id="1-生成ssh秘钥"><a href="#1-生成ssh秘钥" class="headerlink" title="1.生成ssh秘钥"></a>1.生成ssh秘钥</h3><p>首先在git下<br>依次输入命令</p><pre><code>ssh-keygen -t rsa -C ‘注册时的邮箱地址’</code></pre><p>第一行为生成ssh秘钥（邮箱地址例如<a href="mailto:&#101;&#x78;&#x61;&#109;&#x70;&#x6c;&#x65;&#x40;&#x71;&#x71;&#46;&#x63;&#x6f;&#109;">&#101;&#x78;&#x61;&#109;&#x70;&#x6c;&#x65;&#x40;&#x71;&#x71;&#46;&#x63;&#x6f;&#109;</a>）,接着去查看C盘目录(此文件夹所在C:\Users\Administrator.ssh中)，然后在记事本中打开id_rsa.put文件并复制生成的key</p><h3 id="2-ssh秘钥配置"><a href="#2-ssh秘钥配置" class="headerlink" title="2.ssh秘钥配置"></a>2.ssh秘钥配置</h3><p>打开Github,在在GitHub主页的头像下找到settings,之后点击SSH and GPG keys，点击New SSH key<br><img src="https://pic.imgdb.cn/item/66841a28d9c307b7e980e7bf.png"><br>将刚刚在.ssh目录下所复制的id_rsa.put文件中的信息复制进key(注意空格)（名字随意）</p><p>接着在本地绑定与Github的用户名和邮箱（git）<br>输入命令</p><pre><code>git config --global user.name “注册时用户名”git config --global user.email “注册时邮箱”</code></pre><h2 id="5-上传博客"><a href="#5-上传博客" class="headerlink" title="5 上传博客"></a>5 上传博客</h2><p>首先找到之前创建仓库生成的Github仓库SSH地址(如果没有保存点击仓库主页的Clone or download可重新查看）然后打开博客文件夹下的_config.yml ,然后将文章末尾改为以下格式：<br><img src="https://pic.imgdb.cn/item/66841dc1d9c307b7e988d6f9.png"><br>接着需要安装一个上传工具<br>输入命令（git）</p><pre><code>cnpm install hexo-deployer-git</code></pre><p>新建文章(不新建的话也会有一篇自带的Hello World文章)<br>输入命令</p><pre><code>hexo new “文章名称”</code></pre><p>注意文章名称要为<strong>小写英文</strong>（例：my-new-post），如何用别的语言或大写的话无法正常定位网页</p><p>然后根据返回的地址即可找到创建的文件位置，即可使用编辑器打开编辑(如VScode,Markdown等)</p><p>编辑后就输入命令</p><pre><code>hexo g -d</code></pre><p>其中 <strong>hexo g</strong> 为生成文件，<strong>hexo d</strong> 为部署到Github</p><p>之后每次上传博客都是此顺序</p><h2 id="6-注意事项！！"><a href="#6-注意事项！！" class="headerlink" title="6 注意事项！！"></a>6 注意事项！！</h2><p>在使用 <strong>hexo d</strong> 命运时要检查自己Github仓库的<strong>Settings</strong>中的<strong>Code security and analysis</strong>中<strong>Secret scanning</strong>与其子选项<strong>Push protection</strong>是否禁用，推荐在使用命令的时候关闭这两个功能，否则无法正常上传，上传完成后还是开启，这样比较安全一点<br><img src="https://pic.imgdb.cn/item/66855d5cd9c307b7e9b55804.png"></p><p>部署之后可发现GitHub中多了文件，此时浏览器输入：<strong>https:&#x2F;&#x2F;用户名.github.io</strong>(Github仓库名)就可以访问博客啦（刚刚部署后需要一定时间加载，出现未更新等待一段时间即可）</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Git </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/29/hello-world/"/>
      <url>/2024/06/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
